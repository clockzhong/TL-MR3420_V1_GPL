/*
 * Automatically generated C config: don't edit
 * Linux kernel version: 2.6.15--LSDK-7.3.1.41
 * Fri Nov 20 11:40:13 2015
 */



/*
 * Machine selection
 */
/*
 * AR724x GPIO Setting Support
 */


/*
 * JumpStart LED
 */



/*
 * Ready Status
 */



/*
 * USB(TMS) LED
 */



/*
 * Reset Factory Default
 */



/*
 * JumpStart Switch
 */
/*
 * CPU selection
 */
/*
 * Kernel type
 */
/*
 * MIPSR2 Interrupt handling
 */
/*
 * Code maturity level options
 */





/*
 * General setup
 */
/*
 * Loadable module support
 */
/*
 * Block layer
 */


/*
 * IO Schedulers
 */
/*
 * Bus options (PCI, PCMCIA, EISA, ISA, TC)
 */






/*
 * PCCARD (PCMCIA/CardBus) support
 */


/*
 * PCI Hotplug Support
 */


/*
 * Executable file formats
 */




/*
 * Networking
 */


/*
 * Networking options
 */
/*
 * IP: Virtual Server Configuration
 */






/*
 * Core Netfilter Configuration
 */


/*
 * IP: Netfilter Configuration
 */
/*
 * Bridge: Netfilter Configuration
 */


/*
 * DCCP Configuration (EXPERIMENTAL)
 */


/*
 * SCTP Configuration (EXPERIMENTAL)
 */
/*
 * QoS and/or fair queueing
 */





/*
 * Queueing/Scheduling
 */
/*
 * Classification
 */
/*
 * Network testing
 */






/*
 * Device Drivers
 */

/*
 * Generic Driver Options
 */




/*
 * Connector - unified userspace <-> kernelspace linker
 */


/*
 * Memory Technology Devices (MTD)
 */
/*
 * User Modules And Translation Layers
 */







/*
 * RAM/ROM/Flash chip drivers
 */
/*
 * Mapping drivers for chip access
 */



/*
 * Self-contained MTD device drivers
 */







/*
 * Disk-On-Chip Device Drivers
 */







/*
 * NAND Flash Device Drivers
 */


/*
 * OneNAND Flash Device Drivers
 */


/*
 * Parallel port support
 */


/*
 * Plug and Play support
 */

/*
 * Block devices
 */
/*
 * ATA/ATAPI/MFM/RLL support
 */


/*
 * SCSI device support
 */




/*
 * SCSI support type (disk, tape, CD-ROM)
 */







/*
 * Some SCSI devices (e.g. CD jukebox) support multiple LUNs
 */




/*
 * SCSI Transport Attributes
 */





/*
 * SCSI low-level drivers
 */
/*
 * Multi-device support (RAID and LVM)
 */


/*
 * Fusion MPT device support
 */





/*
 * IEEE 1394 (FireWire) support
 */


/*
 * I2O device support
 */


/*
 * Network device support
 */






/*
 * ARCnet devices
 */


/*
 * PHY device support
 */


/*
 * Ethernet (10 or 100Mbit)
 */







/*
 * Tulip family network device support
 */




/*
 * Ethernet (1000 Mbit)
 */
/*
 * Ethernet (10000 Mbit)
 */




/*
 * Token Ring devices
 */


/*
 * Wireless LAN (non-hamradio)
 */


/*
 * Obsolete Wireless cards support (pre-802.11)
 */


/*
 * Wireless 802.11b ISA/PCI cards support
 */



/*
 * Prism GT/Duette 802.11(a/b/g) PCI/Cardbus support
 */




/*
 * Wan interfaces
 */
/*
 * ISDN subsystem
 */


/*
 * Telephony Support
 */


/*
 * Input device support
 */


/*
 * Hardware I/O ports
 */



/*
 * Character devices
 */



/*
 * Serial drivers
 */





/*
 * Non-8250 serial port support
 */






/*
 * IPMI
 */


/*
 * Watchdog Cards
 */







/*
 * Ftape, the floppy tape device driver
 */



/*
 * TPM devices
 */



/*
 * I2C support
 */


/*
 * Dallas's 1-wire bus
 */


/*
 * Hardware Monitoring support
 */



/*
 * Misc devices
 */

/*
 * Multimedia Capabilities Port drivers
 */

/*
 * Multimedia devices
 */


/*
 * Digital Video Broadcasting Devices
 */


/*
 * Graphics support
 */


/*
 * Sound
 */


/*
 * USB support
 */






/*
 * Miscellaneous USB options
 */





/*
 * USB Host Controller Drivers
 */
/*
 * USB Device Class drivers
 */



/*
 * NOTE: USB_STORAGE enables SCSI, and 'SCSI disk support'
 */

/*
 * may also be needed; see USB_STORAGE Help for more information
 */
/*
 * USB Input Devices
 */


/*
 * USB HID Boot Protocol drivers
 */

/*
 * USB Imaging devices
 */



/*
 * USB Multimedia devices
 */


/*
 * Video4Linux support is needed for USB Multimedia device support
 */

/*
 * USB Network Adapters
 */
/*
 * USB port drivers
 */

/*
 * USB Serial Converter support
 */


/*
 * USB Miscellaneous drivers
 */
/*
 * USB DSL modem support
 */

/*
 * USB Gadget Support
 */


/*
 * MMC/SD Card support
 */


/*
 * InfiniBand support
 */


/*
 * SN Devices
 */

/*
 * File systems
 */
/*
 * CD-ROM/DVD Filesystems
 */



/*
 * DOS/FAT/NT Filesystems
 */
/*
 * Pseudo filesystems
 */
/*
 * Miscellaneous filesystems
 */
/*
 * Network File Systems
 */
/*
 * Partition Types
 */
/*
 * Native Language Support
 */
/*
 * Profiling support
 */


/*
 * Kernel hacking
 */






/*
 * Security options
 */



/*
 * Cryptographic options
 */
/*
 * Hardware crypto devices
 */

/*
 * Library routines
 */
/* This file is no longer in use and kept only for backward compatibility.
 * autoconf.h is now included via -imacros on the commandline
 */

/*
 * Automatically generated C config: don't edit
 * Linux kernel version: 2.6.15--LSDK-7.3.1.41
 * Fri Nov 20 11:40:13 2015
 */



/*
 * Machine selection
 */
/*
 * AR724x GPIO Setting Support
 */


/*
 * JumpStart LED
 */



/*
 * Ready Status
 */



/*
 * USB(TMS) LED
 */



/*
 * Reset Factory Default
 */



/*
 * JumpStart Switch
 */
/*
 * CPU selection
 */
/*
 * Kernel type
 */
/*
 * MIPSR2 Interrupt handling
 */
/*
 * Code maturity level options
 */





/*
 * General setup
 */
/*
 * Loadable module support
 */
/*
 * Block layer
 */


/*
 * IO Schedulers
 */
/*
 * Bus options (PCI, PCMCIA, EISA, ISA, TC)
 */






/*
 * PCCARD (PCMCIA/CardBus) support
 */


/*
 * PCI Hotplug Support
 */


/*
 * Executable file formats
 */




/*
 * Networking
 */


/*
 * Networking options
 */
/*
 * IP: Virtual Server Configuration
 */






/*
 * Core Netfilter Configuration
 */


/*
 * IP: Netfilter Configuration
 */
/*
 * Bridge: Netfilter Configuration
 */


/*
 * DCCP Configuration (EXPERIMENTAL)
 */


/*
 * SCTP Configuration (EXPERIMENTAL)
 */
/*
 * QoS and/or fair queueing
 */





/*
 * Queueing/Scheduling
 */
/*
 * Classification
 */
/*
 * Network testing
 */






/*
 * Device Drivers
 */

/*
 * Generic Driver Options
 */




/*
 * Connector - unified userspace <-> kernelspace linker
 */


/*
 * Memory Technology Devices (MTD)
 */
/*
 * User Modules And Translation Layers
 */







/*
 * RAM/ROM/Flash chip drivers
 */
/*
 * Mapping drivers for chip access
 */



/*
 * Self-contained MTD device drivers
 */







/*
 * Disk-On-Chip Device Drivers
 */







/*
 * NAND Flash Device Drivers
 */


/*
 * OneNAND Flash Device Drivers
 */


/*
 * Parallel port support
 */


/*
 * Plug and Play support
 */

/*
 * Block devices
 */
/*
 * ATA/ATAPI/MFM/RLL support
 */


/*
 * SCSI device support
 */




/*
 * SCSI support type (disk, tape, CD-ROM)
 */







/*
 * Some SCSI devices (e.g. CD jukebox) support multiple LUNs
 */




/*
 * SCSI Transport Attributes
 */





/*
 * SCSI low-level drivers
 */
/*
 * Multi-device support (RAID and LVM)
 */


/*
 * Fusion MPT device support
 */





/*
 * IEEE 1394 (FireWire) support
 */


/*
 * I2O device support
 */


/*
 * Network device support
 */






/*
 * ARCnet devices
 */


/*
 * PHY device support
 */


/*
 * Ethernet (10 or 100Mbit)
 */







/*
 * Tulip family network device support
 */




/*
 * Ethernet (1000 Mbit)
 */
/*
 * Ethernet (10000 Mbit)
 */




/*
 * Token Ring devices
 */


/*
 * Wireless LAN (non-hamradio)
 */


/*
 * Obsolete Wireless cards support (pre-802.11)
 */


/*
 * Wireless 802.11b ISA/PCI cards support
 */



/*
 * Prism GT/Duette 802.11(a/b/g) PCI/Cardbus support
 */




/*
 * Wan interfaces
 */
/*
 * ISDN subsystem
 */


/*
 * Telephony Support
 */


/*
 * Input device support
 */


/*
 * Hardware I/O ports
 */



/*
 * Character devices
 */



/*
 * Serial drivers
 */





/*
 * Non-8250 serial port support
 */






/*
 * IPMI
 */


/*
 * Watchdog Cards
 */







/*
 * Ftape, the floppy tape device driver
 */



/*
 * TPM devices
 */



/*
 * I2C support
 */


/*
 * Dallas's 1-wire bus
 */


/*
 * Hardware Monitoring support
 */



/*
 * Misc devices
 */

/*
 * Multimedia Capabilities Port drivers
 */

/*
 * Multimedia devices
 */


/*
 * Digital Video Broadcasting Devices
 */


/*
 * Graphics support
 */


/*
 * Sound
 */


/*
 * USB support
 */






/*
 * Miscellaneous USB options
 */





/*
 * USB Host Controller Drivers
 */
/*
 * USB Device Class drivers
 */



/*
 * NOTE: USB_STORAGE enables SCSI, and 'SCSI disk support'
 */

/*
 * may also be needed; see USB_STORAGE Help for more information
 */
/*
 * USB Input Devices
 */


/*
 * USB HID Boot Protocol drivers
 */

/*
 * USB Imaging devices
 */



/*
 * USB Multimedia devices
 */


/*
 * Video4Linux support is needed for USB Multimedia device support
 */

/*
 * USB Network Adapters
 */
/*
 * USB port drivers
 */

/*
 * USB Serial Converter support
 */


/*
 * USB Miscellaneous drivers
 */
/*
 * USB DSL modem support
 */

/*
 * USB Gadget Support
 */


/*
 * MMC/SD Card support
 */


/*
 * InfiniBand support
 */


/*
 * SN Devices
 */

/*
 * File systems
 */
/*
 * CD-ROM/DVD Filesystems
 */



/*
 * DOS/FAT/NT Filesystems
 */
/*
 * Pseudo filesystems
 */
/*
 * Miscellaneous filesystems
 */
/*
 * Network File Systems
 */
/*
 * Partition Types
 */
/*
 * Native Language Support
 */
/*
 * Profiling support
 */


/*
 * Kernel hacking
 */






/*
 * Security options
 */



/*
 * Cryptographic options
 */
/*
 * Hardware crypto devices
 */

/*
 * Library routines
 */
/* Align . to a 8 byte boundary equals to maximum function alignment. */
/* sched.text is aling to function alignment to secure we have same
 * address even at second ld pass when generating System.map */






/* spinlock.text is aling to function alignment to secure we have same
 * address even at second ld pass when generating System.map */
  /* DWARF debug sections.
		Symbols in the DWARF debugging sections are relative to
		the beginning of the section so we begin them at 0.  */
  /* Stabs debugging sections.  */
OUTPUT_ARCH(mips)
ENTRY(kernel_entry)
jiffies = jiffies_64 + 4;
SECTIONS
{
  . = 0xffffffff80002000;
  /* read-only */
  _text = .; /* Text and read-only data */
  .text : {
    *(.text)
    . = ALIGN(8); __sched_text_start = .; *(.sched.text) __sched_text_end = .;
    . = ALIGN(8); __lock_text_start = .; *(.spinlock.text) __lock_text_end = .;
    *(.fixup)
    *(.gnu.warning)
  } =0

  _etext = .; /* End of text section */

  . = ALIGN(16); /* Exception table */
  __start___ex_table = .;
  __ex_table : { *(__ex_table) }
  __stop___ex_table = .;

  __start___dbe_table = .; /* Exception table for data bus errors */
  __dbe_table : { *(__dbe_table) }
  __stop___dbe_table = .;

  .rodata : AT(ADDR(.rodata) - 0) { *(.rodata) *(.rodata.*) *(__vermagic) } .rodata1 : AT(ADDR(.rodata1) - 0) { *(.rodata1) } .pci_fixup : AT(ADDR(.pci_fixup) - 0) { __start_pci_fixups_early = .; *(.pci_fixup_early) __end_pci_fixups_early = .; __start_pci_fixups_header = .; *(.pci_fixup_header) __end_pci_fixups_header = .; __start_pci_fixups_final = .; *(.pci_fixup_final) __end_pci_fixups_final = .; __start_pci_fixups_enable = .; *(.pci_fixup_enable) __end_pci_fixups_enable = .; } .rio_route : AT(ADDR(.rio_route) - 0) { __start_rio_route_ops = .; *(.rio_route_ops) __end_rio_route_ops = .; } __ksymtab : AT(ADDR(__ksymtab) - 0) { __start___ksymtab = .; *(__ksymtab) __stop___ksymtab = .; } __ksymtab_gpl : AT(ADDR(__ksymtab_gpl) - 0) { __start___ksymtab_gpl = .; *(__ksymtab_gpl) __stop___ksymtab_gpl = .; } __kcrctab : AT(ADDR(__kcrctab) - 0) { __start___kcrctab = .; *(__kcrctab) __stop___kcrctab = .; } __kcrctab_gpl : AT(ADDR(__kcrctab_gpl) - 0) { __start___kcrctab_gpl = .; *(__kcrctab_gpl) __stop___kcrctab_gpl = .; } __ksymtab_strings : AT(ADDR(__ksymtab_strings) - 0) { *(__ksymtab_strings) } __param : AT(ADDR(__param) - 0) { __start___param = .; *(__param) __stop___param = .; }

  /* writeable */
  .data : { /* Data */
    . = . + 0; /* for CONFIG_MAPPED_KERNEL */
    *(.data.init_task)

    *(.data)

    CONSTRUCTORS
  }
  _gp = . + 0x8000;
  .lit8 : { *(.lit8) }
  .lit4 : { *(.lit4) }
  /* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .sdata : { *(.sdata) }

  . = ALIGN(4096);
  __nosave_begin = .;
  .data_nosave : { *(.data.nosave) }
  . = ALIGN(4096);
  __nosave_end = .;

  . = ALIGN(32);
  .data.cacheline_aligned : { *(.data.cacheline_aligned) }

  _edata = .; /* End of data section */

  /* will be freed after init */
  . = ALIGN(4096); /* Init code and data */
  __init_begin = .;
  .init.text : {
 _sinittext = .;
 *(.init.text)
 _einittext = .;
  }
  .init.data : { *(.init.data) }
  . = ALIGN(16);
  __setup_start = .;
  .init.setup : { *(.init.setup) }
  __setup_end = .;

  __initcall_start = .;
  .initcall.init : {
 *(.initcall1.init)
 *(.initcall2.init)
 *(.initcall3.init)
 *(.initcall4.init)
 *(.initcall5.init)
 *(.initcall6.init)
 *(.initcall7.init)
  }
  __initcall_end = .;

  __con_initcall_start = .;
  .con_initcall.init : { *(.con_initcall.init) }
  __con_initcall_end = .;
  .security_initcall.init : AT(ADDR(.security_initcall.init) - 0) { __security_initcall_start = .; *(.security_initcall.init) __security_initcall_end = .; }
  . = ALIGN(4096);
  __initramfs_start = .;
  .init.ramfs : { *(.init.ramfs) }
  __initramfs_end = .;
  . = ALIGN(32);
  __per_cpu_start = .;
  .data.percpu : { *(.data.percpu) }
  __per_cpu_end = .;
  . = ALIGN(4096);
  __init_end = .;
  /* freed after init ends here */

  __bss_start = .; /* BSS */
  .sbss : {
    *(.sbss)
    *(.scommon)
  }
  .bss : {
    *(.bss)
    *(COMMON)
  }
  __bss_stop = .;

  _end = . ;

  /* Sections to be discarded */
  /DISCARD/ : {
        *(.exit.text)
        *(.exit.data)
        *(.exitcall.exit)

 /* ABI crap starts here */
 *(.comment)
 *(.MIPS.options)
 *(.note)
 *(.options)
 *(.pdr)
 *(.reginfo)
 *(.mdebug*)
  }

  /* This is the MIPS specific mdebug section.  */
  .mdebug : { *(.mdebug) }
  /* These are needed for ELF backends which have not yet been
     converted to the new style linker.  */
  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  /* DWARF debug sections.
     Symbols in the .debug DWARF section are relative to the beginning of the
     section so we begin .debug at 0.  It's not clear yet what needs to happen
     for the others.   */
  .debug 0 : { *(.debug) }
  .debug_srcinfo 0 : { *(.debug_srcinfo) }
  .debug_aranges 0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  .debug_sfnames 0 : { *(.debug_sfnames) }
  .line 0 : { *(.line) }
  /* These must appear regardless of  .  */
  .gptab.sdata : { *(.gptab.data) *(.gptab.sdata) }
  .gptab.sbss : { *(.gptab.bss) *(.gptab.sbss) }
  .comment : { *(.comment) }
  .note : { *(.note) }
}
